Kotlin 以其简洁和强大的语法糖而闻名，使得编码更加高效和愉快。以下是一些 Kotlin 中常见的语法糖：

智能类型转换： Kotlin 编译器能够自动进行类型转换，无需显式强制转换。

kotlin
fun demo(x: Any) {
    if (x is String) {
        println(x.length) // 自动转换为 String
    }
}
字符串模板： 使用 $ 符号可以在字符串中嵌入变量。

kotlin
val name = "Kotlin"
println("Hello, $name!") // 输出: Hello, Kotlin!
数据类： 使用 data 关键字可以简化 POJO 类的编写，自动生成 equals、hashCode、toString 等方法。

kotlin
data class User(val name: String, val age: Int)
解构声明： 可以通过解构声明直接获取对象的属性值。

kotlin
val (name, age) = User("Alice", 25)
println("$name, $age") // 输出: Alice, 25
扩展函数： 可以为已有类添加新方法，而无需继承或修改其源码。

kotlin
fun String.addExclamation() = this + "!"
println("Hello".addExclamation()) // 输出: Hello!
默认参数： 可以为函数参数设置默认值，简化函数调用。

kotlin
fun greet(name: String = "World") {
    println("Hello, $name!")
}
greet() // 输出: Hello, World!
命名参数： 在调用函数时，可以使用命名参数来提高可读性。

kotlin
fun printRectangle(width: Int, height: Int) {
    println("Width: $width, Height: $height")
}
printRectangle(width = 10, height = 5)
Lambda 表达式： Kotlin 对 Lambda 表达式提供了很好的支持，使得代码更加简洁。

kotlin
val nums = listOf(1, 2, 3, 4)
nums.filter { it > 2 }.forEach { println(it) } // 输出: 3, 4
这些语法糖让 Kotlin 代码更加简洁、易读，同时提高了开发效率。